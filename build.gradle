import org.springframework.boot.gradle.tasks.run.BootRun

buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.1.4")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'info.solidsoft.pitest' version '1.4.6'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'jacoco'
    id 'org.flywaydb.flyway' version '5.2.4'
    id 'org.owasp.dependencycheck' version '5.3.0'
    id 'org.sonarqube' version '2.8'
    id 'org.springframework.boot' version '2.1.2.RELEASE'
}

def versions = [
        awaitility                   : '4.0.2',
        bcpkixJdk15on                : '1.64',
        bspCommonLib                 : '0.0.37',
        ccdStoreClient               : '4.6.4',
        commonsBeanUtils             : '1.9.4',
        commonsIo                    : '2.6',
        commonsLang3                 : '3.9',
        commonsMath3                 : '3.6.1',
        divCommonLib                 : '1.0.7',
        dumbster                     : '1.7.1',
        elasticsearch                : '7.5.1',
        feignHttpClient              : '10.3.0',
        flyway                       : '5.2.4',
        gradlePitest                 : '1.4.6',
        guava                        : '28.2-jre',
        hibernateTypes               : '2.4.4',
        hmctsNotify                  : '3.14.1-RELEASE',
        idamClient                   : '1.3.0',
        jackson                      : '2.10.0',
        jacksonDatatypeJsr           : '2.10.0',
        javaxMail                    : '1.4',
        javaxWsRs                    : '2.1.1',
        jdbi                         : '2.78',
        jsonAssert                   : '1.2.3',
        jsonPathAssert               : '2.2.0',
        lombok                       : '1.16.16',
        pitest                       : '1.4.10',
        postgresql                   : '42.2.9',
        puppyCrawl                   : '8.29',
        quartz                       : '2.3.2',
        reformHealth                 : '0.0.5',
        reformPropertiesVolume       : '0.0.4',
        reformsJavaLogging           : '5.1.1',
        reformSpringBootAutoConfigure: '2.0.0',
        restAssured                  : '3.0.3',
        sendLetterClient             : '2.2.0',
        serenity                     : '2.0.91',
        serenityCucumber             : '1.9.50',
        serviceTokenGenerator        : '3.0.0',
        sonarPitest                  : '0.5',
        springCloudDependencies      : '2.1.2.RELEASE',
        springfoxSwagger             : '2.9.2',
        springSecurityCrypto         : '5.2.0.RELEASE',
        springSecurityRsa            : '1.0.8.RELEASE',
        tomcat                       : '9.0.31',
        unirest                      : '1.4.9'
]

allprojects {

    def springBootVersion = '2.1.2.RELEASE'

    apply plugin: 'checkstyle'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'org.owasp.dependencycheck'

    group = 'uk.gov.hmcts.reform.divorce'
    version = '0.0.1'

    checkstyle {
        maxWarnings = 0
        toolVersion = '8.29'
        // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
        configDir = new File(rootDir, './')
    }

    // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
    dependencyCheck {
        // Specifies if the build should be failed if a CVSS score above a specified level is identified.
        // range of 0-10 fails the build, anything greater and it doesn't fail the build
        failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
        suppressionFile = 'dependency-check-suppressions.xml'
        analyzers {
            // Disable scanning of .NET related binaries
            assemblyEnabled = false
        }
    }

    repositories {
        mavenLocal()
        maven {
            url "https://dl.bintray.com/hmcts/hmcts-maven"
        }
        maven {
            url 'https://repo.spring.io/libs-milestone'
        }
        jcenter()
    }

    dependencyManagement {

        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
        dependencies {
            // force spring fox swagger to use non-vulnerable guava >20
            dependencySet(group: 'com.google.guava', version: versions.guava) {
                entry 'guava'
            }
            dependencySet(
                    group: 'com.fasterxml.jackson.core',
                    version: versions.jackson
            ) {
                entry 'jackson-core'
                entry 'jackson-databind'
            }
            dependencySet(
                    group: 'com.fasterxml.jackson.datatype',
                    version: versions.jackson
            ) {
                entry 'jackson-datatype-jdk8'
                entry 'jackson-datatype-jsr310'
            }
            dependencySet(
                    group: 'com.fasterxml.jackson.module',
                    version: versions.jackson
            ) {
                entry 'jackson-module-parameter-names'
            }

            // solves CVE-2014-3488, CVE-2015-2156, CVE-2019-16869
            dependencySet(group: 'io.netty', version: '4.1.49.Final') {
                entry 'netty-buffer'
                entry 'netty-codec'
                entry 'netty-codec-http'
                entry 'netty-common'
                entry 'netty-handler'
                entry 'netty-resolver'
                entry 'netty-transport'
            }
            dependency group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.4'

            dependencySet(group: 'org.apache.tomcat.embed', version: versions.tomcat) {
                entry 'tomcat-embed-core'
                entry 'tomcat-embed-websocket'
                entry 'tomcat-embed-el'
            }
        }
    }
}

apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.divorce'
version = '0.0.1'
sourceCompatibility = 1.8

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }

    archiveName 'div-case-orchestration-service.jar'
}

mainClassName = 'uk.gov.hmcts.reform.divorce.orchestration.OrchestrationServiceApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

distributions {
    main {
        contents {
            from(file("$projectDir/lib/AI-Agent.xml")) {
                into "lib"
            }
        }
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

dependencies {
    compile project(':job-scheduler')

    compileOnly("org.projectlombok:lombok:${versions.lombok}")
    testCompileOnly("org.projectlombok:lombok:${versions.lombok}")
    annotationProcessor("org.projectlombok:lombok:${versions.lombok}")
    testAnnotationProcessor("org.projectlombok:lombok:${versions.lombok}")

    compile group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jsonPathAssert
    compile group: 'com.github.kirviq', name: 'dumbster', version: versions.dumbster
    compile group: 'com.puppycrawl.tools', name: 'checkstyle', version: versions.puppyCrawl
    compile group: 'com.vladmihalcea', name: 'hibernate-types-52', version: versions.hibernateTypes
    compile group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    compile group: 'info.solidsoft.gradle.pitest', name: 'gradle-pitest-plugin', version: versions.gradlePitest
    compile group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    compile group: 'javax.mail', name: 'mail', version: versions.javaxMail
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: versions.javaxWsRs
    compile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    compile group: 'org.apache.commons', name: 'commons-math3', version: versions.commonsMath3
    compile group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
    compile group: 'org.elasticsearch', name: 'elasticsearch', version: versions.elasticsearch
    compile group: 'org.elasticsearch.client', name: 'transport', version: versions.elasticsearch
    compile group: 'org.flywaydb', name: 'flyway-core', version: versions.flyway
    compile group: 'org.jdbi', name: 'jdbi', version: versions.jdbi
    compile group: 'org.pitest', name: 'pitest', version: versions.pitest
    compile group: 'org.postgresql', name: 'postgresql', version: versions.postgresql
    compile group: 'org.springframework', name: 'spring-context-support'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-quartz'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.retry', name: 'spring-retry'
    compile group: 'uk.gov.hmcts.reform', name: 'bsp-common-lib', version: versions.bspCommonLib
    compile group: 'uk.gov.hmcts.reform', name: 'div-common-lib', version: versions.divCommonLib
    compile group: 'uk.gov.hmcts.reform', name: 'idam-client', version: versions.idamClient
    compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.reformsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformsJavaLogging
    compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: versions.reformHealth
    compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: versions.reformSpringBootAutoConfigure
    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
    compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator
    compile group: 'uk.gov.hmcts.reform', name: 'send-letter-client', version: versions.sendLetterClient
    compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: versions.hmctsNotify

    compile(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign')
            {
                exclude group: 'io.reactivex', module: 'io.reactivex'
                exclude group: 'io.reactivex', module: 'rxnetty'
                exclude group: 'io.reactivex', module: 'rxnetty-contexts'
                exclude group: 'io.reactivex', module: 'rxnetty-servo'
            }

    compile(group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils) {
        force = true
    }

    compile(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson) {
        force = true
    }

    compile(group: 'com.google.guava', name: 'guava', version: versions.guava) {
        force = true
    }

    compile(group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: versions.bcpkixJdk15on) {
        force = true
    }

    compile(group: 'org.springframework.security', name: 'spring-security-rsa', version: versions.springSecurityRsa) {
        force = true
    }

    compile(group: 'org.springframework.security', name: 'spring-security-crypto', version: versions.springSecurityCrypto) {
        force = true
    }

    compile(group: 'org.quartz-scheduler', name:'quartz', version: versions.quartz) {
        force = true
    }

    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile group: 'org.awaitility', name:'awaitility', version: versions.awaitility
    testCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: versions.springCloudDependencies
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude(module: 'commons-logging')
        exclude(module: 'android-json')
    }

    //integration test
    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestCompile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jacksonDatatypeJsr
    integrationTestCompile group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirest
    integrationTestCompile group: 'io.github.openfeign', name: 'feign-httpclient', version: versions.feignHttpClient
    integrationTestCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    integrationTestCompile group: 'junit', name: 'junit', version: versions.junit
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestCompile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    integrationTestCompile group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestCompile group: 'org.skyscreamer', name: 'jsonassert', version: versions.jsonAssert
    integrationTestCompile group: 'org.springframework', name: 'spring-context-support'
    integrationTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    integrationTestCompile(group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign')
            {
                exclude group: 'io.reactivex', module: 'io.reactivex'
                exclude group: 'io.reactivex', module: 'rxnetty'
                exclude group: 'io.reactivex', module: 'rxnetty-contexts'
                exclude group: 'io.reactivex', module: 'rxnetty-servo'
            }
    integrationTestCompile(group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: versions.ccdStoreClient)
            {
                exclude group: 'io.reactivex', module: 'io.reactivex'
                exclude group: 'io.reactivex', module: 'rxnetty'
                exclude group: 'io.reactivex', module: 'rxnetty-contexts'
                exclude group: 'io.reactivex', module: 'rxnetty-servo'
            }
    integrationTestCompile(group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator)
            {
                exclude group: 'io.reactivex', module: 'io.reactivex'
                exclude group: 'io.reactivex', module: 'rxnetty'
                exclude group: 'io.reactivex', module: 'rxnetty-contexts'
                exclude group: 'io.reactivex', module: 'rxnetty-servo'
            }
}

dependencies {
    integrationTestCompile(sourceSets.test.output)
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    useJUnit {
        includeCategories 'uk.gov.hmcts.reform.divorce.orchestration.category.SmokeTest'
    }
}

task bootRunAat(type: BootRun, description: 'Runs the app using AAT config', dependsOn: 'classes', group: 'Application') {
    environment "http_proxy", "http://proxyout.reform.hmcts.net:8080"
    doFirst() {
        main = bootJar.mainClassName
        classpath = sourceSets.main.runtimeClasspath
        systemProperties = System.properties
        systemProperty 'spring.profiles.active', 'aat'
    }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    printf("Available processors:::::::::: " + Runtime.runtime.availableProcessors().intdiv(2).toString())

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 10

    setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
    setClasspath(sourceSets.integrationTest.runtimeClasspath)
    if (System.getenv('CHANGE_TITLE')?.startsWith('[FAST]')) {
        useJUnit {
            excludeCategories 'uk.gov.hmcts.reform.divorce.category.ExtendedTest'
        }
    }
    finalizedBy aggregate
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.divorce.orchestration.*']
    excludedClasses = ['uk.gov.hmcts.reform.divorce.orchestration.config.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.domain.model.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.exception.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.client.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.management.config.*',
                       'uk.gov.hmcts.reform.divorce.orchestration.framework.workflow.task.*']
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 80
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def sonarExclusions = [
        '**uk/gov/hmcts/reform/divorce/orchestration/domain/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/**/config/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/OrchestrationServiceApplication.java',
        '**uk/gov/hmcts/reform/divorce/orchestration/client/**',
        '**uk/gov/hmcts/reform/divorce/orchestration/event/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/service/bulk/scan/**/*',
        '**uk/gov/hmcts/reform/divorce/orchestration/controller/BulkScanController.java',
        '**uk/gov/hmcts/reform/divorce/orchestration/framework/workflow/task/DefaultTaskContext.java',
        '**uk/gov/hmcts/reform/divorce/scheduler/model/*',
        '**uk/gov/hmcts/reform/divorce/scheduler/config/**/*'
]

sonarqube {
    properties {
        property "sonar.projectName", "Divorce :: div-case-orchestration-service"
        property "sonar.projectKey", "div-case-orchestration-service"
        property "sonar.exclusions", sonarExclusions.join(", ")
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}

flyway {
    url = System.getenv('FLYWAY_URL')
    user = System.getenv('DIV_SCHEDULER_DB_USER_NAME')
    password = System.getenv('DIV_SCHEDULER_DB_PASSWORD')
    baselineOnMigrate = true
    baselineVersion = '000'
}

task migratePostgresDatabase(type: org.flywaydb.gradle.task.FlywayMigrateTask) {
    baselineOnMigrate = true
    if (project.hasProperty("dburl")) {
        url = "jdbc:postgresql://${dburl}"
    }
}
